worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /usr/local/openresty/nginx/logs/nginx.pid;

events {
    worker_connections 4096;
    use epoll;
    multi_accept on;
}

http {
    # Define IP addresses exempt from rate limiting
    # See https://blog.nginx.org/blog/rate-limiting-nginx
    geo $rate_limit_override {
        default 0;
        204.48.36.211 1;  # Exempt this IP from rate limiting
    }
    
    # Map to set the rate limit key (empty string bypasses rate limiting)
    map $rate_limit_override $rate_limit_key {
        0 $binary_remote_addr;
        1 "";
    }

    include /usr/local/openresty/nginx/conf/mime.types;
    default_type application/json;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time backend=$upstream_addr';

    access_log /var/log/nginx/access.log main;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 1000;

    # Shared memory for caching backend IPs
    lua_shared_dict backend_cache 1m;
    

    # Initialize background refresh of backend IPs
    init_worker_by_lua_block {
        local function refresh_backends()
            -- TODO: Query Postgres for current leader/follower IPs
            -- For now, use static values
            ngx.shared.backend_cache:set("leader", "{{ROLLUP_LEADER_IP}}:12346")
            ngx.shared.backend_cache:set("follower", "{{ROLLUP_FOLLOWER_IP}}:12346")
            
            -- Schedule next refresh
            local ok, err = ngx.timer.at(0.2, refresh_backends)
            if not ok then
                ngx.log(ngx.ERR, "failed to schedule backend refresh: ", err)
            end
        end
        
        -- Start the refresh timer
        ngx.timer.at(0, refresh_backends)
    }

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types
        application/json
        text/plain
        text/css
        application/javascript
        text/xml
        application/xml
        application/xml+rss
        text/javascript;

    # Buffer sizes - limit request body size
    client_body_buffer_size 128k;    # Buffer small requests in memory
    client_max_body_size 1m;        # Reject requests > 1MB
    client_header_buffer_size 1k;
    large_client_header_buffers 4 4k;

    # DNS resolver for dynamic proxy_pass - AWS VPC DNS: https://docs.aws.amazon.com/vpc/latest/userguide/AmazonDNS-concepts.html
    resolver 169.254.169.253 valid=10s;
    
    # Proxy settings
    proxy_buffering on;
    proxy_buffer_size 64k;
    proxy_buffers 8 64k;
    proxy_busy_buffers_size 128k;
    proxy_http_version 1.1;

    # Rate limiting zone - 100 requests per second per IP
    # Uses $rate_limit_key which is empty for exempted IPs (defined in httpBaseConfig)
    limit_req_zone $rate_limit_key zone=global_limit:10m rate=100r/s;
    
    # WebSocket connection upgrade map
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    server {
        listen 80;
        server_name {{DOMAIN_NAME}};

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # ACME challenge for Let's Encrypt
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }

        # Redirect all other HTTP traffic to HTTPS
        location / {
            return 301 https://$server_name$request_uri;
        }
    }

    server {
        listen 443 ssl;
        http2 on;
        server_name {{DOMAIN_NAME}};

        # SSL certificate paths (will be created by certbot)
        ssl_certificate /etc/letsencrypt/live/{{DOMAIN_NAME}}/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/{{DOMAIN_NAME}}/privkey.pem;

        # Modern SSL configuration
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384';
        ssl_prefer_server_ciphers off;
        ssl_session_timeout 1d;
        ssl_session_cache shared:SSL:50m;
        ssl_session_tickets off;

        # Security headers
        add_header Strict-Transport-Security "max-age=31536000" always;
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Main proxy location with dynamic backend selection
        location / {
            # Apply conditional rate limiting
            limit_req zone=global_limit burst=50 nodelay;
            limit_req_status 429;
            
            set $backend '';
            
            access_by_lua_block {
                local uri = ngx.var.uri
                local method = ngx.var.request_method
                local backend_cache = ngx.shared.backend_cache
                
                -- Default to follower
                local use_leader = false
                
                -- Check if this is a WebSocket upgrade request
                local is_websocket = ngx.var.http_upgrade and ngx.var.http_upgrade:lower() == "websocket"
                
                -- Route /sequencer/txs POSTs to leader
                if uri == "/sequencer/txs" and method == "POST" then
                    use_leader = true
                -- Route WebSocket connections to leader for consistency
                elseif is_websocket then
                    use_leader = true
                -- Check for JSON-RPC eth_sendRawTransaction on /rpc endpoint
                elseif uri == "/rpc" and method == "POST" then
                    -- Read request body
                    ngx.req.read_body()
                    local body = ngx.req.get_body_data()
                    
                    if body then
                        -- Look for method pattern without full JSON parsing
                        local method = body:match('"method"%s*:%s*"([^"]+)"')
                        
                        if method == "eth_sendRawTransaction" or method == "realtime_sendRawTransaction" then
                            use_leader = true
                        end
                    end
                end
                
                -- Select backend based on routing decision
                if use_leader then
                    ngx.var.backend = backend_cache:get("leader") or "{{ROLLUP_LEADER_IP}}:12346"
                else
                    -- Route all other requests to follower (fallback to leader if no follower)
                    ngx.var.backend = backend_cache:get("follower") or 
                                     backend_cache:get("leader") or 
                                     "{{ROLLUP_FOLLOWER_IP}}:12346"
                end
            }
            
            proxy_pass http://$backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # WebSocket support
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;

            # Timeouts
            proxy_connect_timeout 5s;
            proxy_send_timeout 3600s;  # 1 hour to support long-lived websocket connections
            proxy_read_timeout 3600s;  # 1 hour to support long-lived websocket connections
        }
    }
}
